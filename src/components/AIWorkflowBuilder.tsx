import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Textarea } from './ui/textarea';
import { Badge } from './ui/badge';
import { ScrollArea } from './ui/scroll-area';
import { Separator } from './ui/separator';
import { Bot, CheckCircle, Clock, ArrowRight, Sparkles, Target, Database, Send, FileSpreadsheet, Slack, X } from 'lucide-react';

interface WorkflowStep {
  id: string;
  name: string;
  description: string;
  icon: React.ReactNode;
  color: string;
  type: 'data' | 'service';
  settings: Record<string, any>;
  confidence: 'high' | 'medium' | 'low';
}

interface AIWorkflowBuilderProps {
  isOpen: boolean;
  onClose: () => void;
  onWorkflowGenerated: (steps: WorkflowStep[]) => void;
}

export function AIWorkflowBuilder({ isOpen, onClose, onWorkflowGenerated }: AIWorkflowBuilderProps) {
  const [userInput, setUserInput] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedSteps, setGeneratedSteps] = useState<WorkflowStep[]>([]);
  const [currentStep, setCurrentStep] = useState(0);

  // AI 워크플로 생성 시뮬레이션
  const generateWorkflow = async () => {
    setIsGenerating(true);
    setCurrentStep(0);

    // 단계별 생성 시뮬레이션
    const steps = [
      "사용자 요구사항 분석 중...",
      "데이터 소스 식별 중...",
      "처리 단계 설계 중...",
      "출력 방식 결정 중...",
      "워크플로 최적화 중..."
    ];

    for (let i = 0; i < steps.length; i++) {
      await new Promise(resolve => setTimeout(resolve, 800));
      setCurrentStep(i + 1);
    }

    // 예시 워크플로 생성
    const workflow: WorkflowStep[] = [];

    if (userInput.includes('스프레드시트') || userInput.includes('엑셀') || userInput.includes('데이터')) {
      workflow.push({
        id: 'data-source',
        name: '스프레드시트 데이터',
        description: '매출 데이터를 입력 소스로 사용',
        icon: <FileSpreadsheet className="w-4 h-4" />,
        color: 'bg-green-500',
        type: 'data',
        settings: {
          source: '매출_데이터.xlsx',
          autoDetected: true
        },
        confidence: 'high'
      });
    }

    if (userInput.includes('HTTP') || userInput.includes('API') || userInput.includes('요청')) {
      workflow.push({
        id: 'http-request',
        name: 'HTTP 요청',
        description: '외부 API로 데이터 전송',
        icon: <Send className="w-4 h-4" />,
        color: 'bg-blue-500',
        type: 'service',
        settings: {
          url: 'https://api.example.com/webhook',
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          autoConfigured: true
        },
        confidence: 'medium'
      });
    }

    if (userInput.includes('슬랙') || userInput.includes('Slack') || userInput.includes('알림')) {
      workflow.push({
        id: 'slack-notification',
        name: 'Slack 알림',
        description: '처리 완료 시 팀에게 알림 전송',
        icon: <Slack className="w-4 h-4" />,
        color: 'bg-purple-500',
        type: 'service',
        settings: {
          channel: '#notifications',
          message: '새로운 매출 데이터가 처리되었습니다: {{제품명}} - {{매출}}원',
          autoGenerated: true
        },
        confidence: 'high'
      });
    }

    // 기본 데이터 처리 단계
    if (workflow.length > 1) {
      const dataProcessor = {
        id: 'data-processor',
        name: '데이터 변환',
        description: '입력 데이터를 처리하여 출력 형식으로 변환',
        icon: <Database className="w-4 h-4" />,
        color: 'bg-orange-500',
        type: 'service' as const,
        settings: {
          transformations: ['format_currency', 'add_timestamp'],
          autoDetected: true
        },
        confidence: 'high' as const
      };
      workflow.splice(1, 0, dataProcessor);
    }

    setGeneratedSteps(workflow);
    setIsGenerating(false);
  };

  const handleConfirmWorkflow = () => {
    onWorkflowGenerated(generatedSteps);
    onClose();
  };

  const handleRegenerateStep = (stepId: string) => {
    // 특정 단계 재생성 로직
    console.log('Regenerating step:', stepId);
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 bg-background/80 backdrop-blur-sm flex items-center justify-center p-4">
      <div className="w-full max-w-4xl max-h-[90vh] bg-background border border-border rounded-2xl shadow-xl overflow-hidden">
        <div className="h-full flex flex-col">
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b border-border">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 rounded-xl bg-primary/10 flex items-center justify-center">
                <Sparkles className="w-5 h-5 text-primary" />
              </div>
              <div>
                <h2 className="title-large text-foreground">AI 워크플로 생성</h2>
                <p className="body-small text-muted-foreground">자연어로 설명하면 AI가 워크플로를 자동 생성합니다</p>
              </div>
            </div>
            <Button variant="ghost" size="sm" onClick={onClose} className="h-8 w-8 p-0 rounded-lg">
              <X className="w-4 h-4" />
            </Button>
          </div>

          <div className="flex-1 overflow-hidden">
            {!generatedSteps.length ? (
              /* 입력 단계 */
              <div className="p-6">
                <div className="max-w-2xl mx-auto space-y-6">
                  <div className="text-center space-y-2">
                    <div className="w-12 h-12 mx-auto rounded-xl bg-primary/10 flex items-center justify-center">
                      <Bot className="w-6 h-6 text-primary" />
                    </div>
                    <h3 className="title-medium text-foreground">무엇을 자동화하고 싶으신가요?</h3>
                    <p className="body-small text-muted-foreground">
                      자연어로 설명하면 AI가 완전한 워크플로를 생성합니다
                    </p>
                  </div>

                  <div className="space-y-4">
                    <Textarea
                      placeholder="예: 매출 데이터를 스프레드시트에서 읽어와서 HTTP API로 전송하고, 완료되면 슬랙으로 알림 보내기"
                      value={userInput}
                      onChange={(e) => setUserInput(e.target.value)}
                      className="min-h-[100px] rounded-xl resize-none"
                    />

                    {/* 빠른 예시 */}
                    <div className="space-y-2">
                      <p className="body-small text-muted-foreground">또는 예시를 선택하세요:</p>
                      <div className="flex flex-wrap gap-2">
                        {[
                          "매출 데이터를 API로 전송하고 슬랙 알림",
                          "고객 피드백 분석 후 이메일 보고서",
                          "재고 부족 시 자동 알림"
                        ].map((example, index) => (
                          <Button
                            key={index}
                            variant="outline"
                            size="sm"
                            onClick={() => setUserInput(example)}
                            className="h-8 px-3 rounded-lg text-xs hover:bg-muted"
                          >
                            {example}
                          </Button>
                        ))}
                      </div>
                    </div>
                  </div>

                  <div className="flex gap-3">
                    <Button
                      onClick={generateWorkflow}
                      disabled={!userInput.trim() || isGenerating}
                      className="flex-1 h-11 rounded-xl"
                    >
                      {isGenerating ? (
                        <>
                          <Clock className="w-4 h-4 mr-2 animate-spin" />
                          생성 중... ({currentStep}/5)
                        </>
                      ) : (
                        <>
                          <Sparkles className="w-4 h-4 mr-2" />
                          워크플로 생성
                        </>
                      )}
                    </Button>
                  </div>
                </div>
              </div>
            ) : (
              /* 생성된 워크플로 확인 단계 */
              <div className="p-6 space-y-6">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="title-medium text-foreground">생성된 워크플로</h3>
                    <p className="body-small text-muted-foreground">AI가 구성한 {generatedSteps.length}단계 워크플로</p>
                  </div>
                  <Badge className="bg-green-50 text-green-700 border-green-200">
                    <CheckCircle className="w-3 h-3 mr-1" />
                    생성 완료
                  </Badge>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                  {/* 워크플로 단계 */}
                  <div className="lg:col-span-2">
                    <ScrollArea className="h-[400px] pr-4">
                      <div className="space-y-3">
                        {generatedSteps.map((step, index) => (
                          <div key={step.id}>
                            <Card className="border-border">
                              <CardContent className="p-4">
                                <div className="flex items-start gap-3">
                                  <div className={`w-10 h-10 rounded-lg ${step.color} flex items-center justify-center text-white flex-shrink-0`}>
                                    {step.icon}
                                  </div>
                                  <div className="flex-1 min-w-0">
                                    <div className="flex items-start justify-between">
                                      <div>
                                        <h4 className="title-small text-foreground">{step.name}</h4>
                                        <p className="body-small text-muted-foreground">{step.description}</p>
                                      </div>
                                      <Badge 
                                        variant="outline" 
                                        className={`ml-2 ${
                                          step.confidence === 'high' ? 'border-green-200 text-green-700' : 
                                          step.confidence === 'medium' ? 'border-orange-200 text-orange-700' : 
                                          'border-red-200 text-red-700'
                                        }`}
                                      >
                                        {step.confidence === 'high' ? '높음' : 
                                         step.confidence === 'medium' ? '보통' : '낮음'}
                                      </Badge>
                                    </div>
                                    
                                    {/* 설정값 미리보기 */}
                                    <div className="mt-3 space-y-1">
                                      {Object.entries(step.settings)
                                        .filter(([key]) => !['autoDetected', 'autoConfigured', 'autoGenerated'].includes(key))
                                        .slice(0, 2)
                                        .map(([key, value]) => (
                                        <div key={key} className="flex items-center gap-2 text-xs">
                                          <span className="text-muted-foreground">
                                            {key === 'source' ? '소스' :
                                             key === 'url' ? 'URL' :
                                             key === 'method' ? '메서드' :
                                             key === 'channel' ? '채널' : key}:
                                          </span>
                                          <span className="text-foreground font-mono truncate">
                                            {typeof value === 'object' ? JSON.stringify(value) : String(value)}
                                          </span>
                                        </div>
                                      ))}
                                    </div>
                                  </div>
                                </div>
                              </CardContent>
                            </Card>
                            
                            {/* 연결 화살표 */}
                            {index < generatedSteps.length - 1 && (
                              <div className="flex justify-center py-2">
                                <ArrowRight className="w-4 h-4 text-muted-foreground" />
                              </div>
                            )}
                          </div>
                        ))}
                      </div>
                    </ScrollArea>
                  </div>

                  {/* 요약 및 액션 */}
                  <div className="space-y-4">
                    <Card className="border-border">
                      <CardHeader className="pb-3">
                        <CardTitle className="title-small">원본 요청</CardTitle>
                      </CardHeader>
                      <CardContent>
                        <p className="body-small text-muted-foreground">{userInput}</p>
                      </CardContent>
                    </Card>

                    <Card className="border-border">
                      <CardHeader className="pb-3">
                        <CardTitle className="title-small">AI 분석</CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-2">
                        <div className="flex items-center gap-2">
                          <CheckCircle className="w-3 h-3 text-green-600" />
                          <span className="body-small">데이터 소스 인식</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <CheckCircle className="w-3 h-3 text-green-600" />
                          <span className="body-small">처리 단계 구성</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <CheckCircle className="w-3 h-3 text-green-600" />
                          <span className="body-small">출력 방식 설정</span>
                        </div>
                      </CardContent>
                    </Card>

                    <div className="space-y-2">
                      <Button
                        onClick={handleConfirmWorkflow}
                        className="w-full h-10 rounded-xl"
                      >
                        <CheckCircle className="w-4 h-4 mr-2" />
                        워크플로 생성
                      </Button>
                      <Button
                        variant="outline"
                        onClick={() => setGeneratedSteps([])}
                        className="w-full h-10 rounded-xl"
                      >
                        다시 생성
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}